const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const { db, initDatabase } = require('./db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = 'your_strong_secret_key_here';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
initDatabase();

// Middleware
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
function authenticate(req, res, next) {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
    const { email, password } = req.body;
    
    if (!email || !password) {
        return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = db.prepare('SELECT * FROM users WHERE email = ?').get(email);
        if (existingUser) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = db.prepare(`
            INSERT INTO users (email, password) 
            VALUES (?, ?)
        `).run(email, hashedPassword);

        res.status(201).json({ 
            id: result.lastInsertRowid, 
            email,
            role: 'user'
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    
    try {
        const user = db.prepare('SELECT * FROM users WHERE email = ?').get(email);
        if (!user) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ 
            id: user.id, 
            email: user.email, 
            role: user.role 
        }, JWT_SECRET, { expiresIn: '1h' });

        res.json({ 
            token,
            user: {
                id: user.id,
                email: user.email,
                role: user.role
            }
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/products', (req, res) => {
    try {
        const search = req.query.search || '';
        const query = `
            SELECT * FROM products 
            WHERE is_approved = 1 
            AND name LIKE ?
            ORDER BY name
        `;
        const products = db.prepare(query).all(`%${search}%`);
        res.json(products);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤' });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
app.post('/api/products', authenticate, (req, res) => {
    const { name, calories, proteins, fats, carbs } = req.body;
    const userId = req.user.id;

    if (!name || !calories || !proteins || !fats || !carbs) {
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const result = db.prepare(`
            INSERT INTO products (name, calories, proteins, fats, carbs, added_by)
            VALUES (?, ?, ?, ?, ?, ?)
        `).run(name, calories, proteins, fats, carbs, userId);

        res.status(201).json({
            id: result.lastInsertRowid,
            name,
            calories,
            proteins,
            fats,
            carbs,
            added_by: userId,
            is_approved: 0
        });
    } catch (error) {
        if (error.message.includes('UNIQUE constraint failed')) {
            return res.status(400).json({ error: '–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(req, res, next) {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    next();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/admin/users', authenticate, isAdmin, (req, res) => {
    try {
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª–∏
        const users = db.prepare('SELECT id, email, role, created_at FROM users').all();
        res.json(users);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/admin/users/:id/role', authenticate, isAdmin, (req, res) => {
    const userId = req.params.id;
    const { role } = req.body;
    
    if (!['user', 'admin'].includes(role)) {
        return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å' });
    }
    
    try {
        db.prepare('UPDATE users SET role = ? WHERE id = ?').run(role, userId);
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
app.get('/api/admin/products/pending', authenticate, isAdmin, (req, res) => {
    try {
        const products = db.prepare(`
            SELECT p.*, u.email as added_by_email 
            FROM products p
            JOIN users u ON p.added_by = u.id
            WHERE p.is_approved = 0
        `).all();
        res.json(products);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤' });
    }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
app.put('/api/admin/products/:id/approve', authenticate, isAdmin, (req, res) => {
    const productId = req.params.id;
    
    try {
        db.prepare('UPDATE products SET is_approved = 1 WHERE id = ?').run(productId);
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
app.delete('/api/admin/products/:id', authenticate, isAdmin, (req, res) => {
    const productId = req.params.id;
    
    try {
        db.prepare('DELETE FROM products WHERE id = ?').run(productId);
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' });
    }
});

app.post('/api/products', authenticate, (req, res) => {
    const { name, calories, proteins, fats, carbs } = req.body;
    const userId = req.user.id;

    if (!name || !calories || !proteins || !fats || !carbs) {
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        const existingProduct = db.prepare('SELECT * FROM products WHERE name = ?').get(name);
        if (existingProduct) {
            return res.status(400).json({ error: '–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —Ñ–ª–∞–≥–æ–º is_approved = 0 (–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
        const result = db.prepare(`
            INSERT INTO products (name, calories, proteins, fats, carbs, added_by, is_approved)
            VALUES (?, ?, ?, ?, ?, ?, 0)
        `).run(name, calories, proteins, fats, carbs, userId);

        res.status(201).json({
            id: result.lastInsertRowid,
            name,
            calories,
            proteins,
            fats,
            carbs,
            added_by: userId,
            is_approved: 0
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' });
    }
});